import { ComponentFixture, TestBed } from '@angular/core/testing';
import { provideZonelessChangeDetection } from '@angular/core';
import { ArticleGenerationComponent } from './article-generation.component';

describe('ArticleGenerationComponent', () => {
  let component: ArticleGenerationComponent;
  let fixture: ComponentFixture<ArticleGenerationComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ArticleGenerationComponent],
      providers: [provideZonelessChangeDetection()]
    }).compileComponents();

    fixture = TestBed.createComponent(ArticleGenerationComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('devrait √™tre cr√©√©', () => {
    expect(component).toBeTruthy();
  });

  describe('onGenerate()', () => {
    it('devrait √©mettre l\'√©v√©nement generate', () => {
      spyOn(component.generate, 'emit');
      
      component.onGenerate();
      
      expect(component.generate.emit).toHaveBeenCalled();
    });

    it('devrait √©mettre l\'√©v√©nement generate m√™me si appel√© plusieurs fois', () => {
      spyOn(component.generate, 'emit');
      
      component.onGenerate();
      component.onGenerate();
      
      expect(component.generate.emit).toHaveBeenCalledTimes(2);
    });

    it('devrait √©mettre l\'√©v√©nement generate sans param√®tres', () => {
      spyOn(component.generate, 'emit');
      
      component.onGenerate();
      
      expect(component.generate.emit).toHaveBeenCalledWith();
    });

    it('devrait fonctionner avec des appels rapides', () => {
      spyOn(component.generate, 'emit');
      
      // Appels rapides successifs
      for (let i = 0; i < 5; i++) {
        component.onGenerate();
      }
      
      expect(component.generate.emit).toHaveBeenCalledTimes(5);
    });

    it('devrait √™tre une m√©thode pure sans effets de bord', () => {
      spyOn(component.generate, 'emit');
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onGenerate();
      
      expect(component.generate.emit).toHaveBeenCalled();
      expect(component.articleIdeaChange.emit).not.toHaveBeenCalled();
    });
  });

  describe('onArticleIdeaChange(value: string)', () => {
    it('devrait √©mettre l\'√©v√©nement articleIdeaChange avec la valeur fournie', () => {
      const testValue = 'Comment planter des roses';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(testValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(testValue);
    });

    it('devrait √©mettre une cha√Æne vide', () => {
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange('');
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith('');
    });

    it('devrait √©mettre une valeur avec des espaces', () => {
      const testValue = '  Id√©e avec espaces  ';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(testValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(testValue);
    });

    it('devrait g√©rer les valeurs longues', () => {
      const longValue = 'Ceci est une tr√®s longue id√©e d\'article qui d√©crit en d√©tail comment cr√©er un jardin urbain avec des plantes comestibles et des fleurs ornementales dans un espace limit√©';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(longValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(longValue);
    });

    it('devrait g√©rer les caract√®res sp√©ciaux', () => {
      const specialValue = 'Article avec √©√†√ß√π & "guillemets" et <balises>';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(specialValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(specialValue);
    });

    it('devrait g√©rer les caract√®res Unicode', () => {
      const unicodeValue = 'üå± Jardinage avec plantes üåø et fleurs üå∏';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(unicodeValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(unicodeValue);
    });

    it('devrait g√©rer plusieurs appels avec diff√©rentes valeurs', () => {
      spyOn(component.articleIdeaChange, 'emit');
      
      const values = ['Premi√®re id√©e', 'Deuxi√®me id√©e', 'Troisi√®me id√©e'];
      values.forEach(value => {
        component.onArticleIdeaChange(value);
      });
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledTimes(3);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith('Premi√®re id√©e');
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith('Deuxi√®me id√©e');
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith('Troisi√®me id√©e');
    });

    it('devrait √™tre une m√©thode pure sans effets de bord', () => {
      const testValue = 'Test value';
      spyOn(component.generate, 'emit');
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(testValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(testValue);
      expect(component.generate.emit).not.toHaveBeenCalled();
    });

    it('devrait pr√©server la valeur exacte pass√©e en param√®tre', () => {
      const exactValue = 'Valeur exacte avec espaces   et caract√®res sp√©ciaux √©√†√ß√π';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(exactValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(exactValue);
    });

    it('devrait g√©rer les cha√Ænes contenant des URLs', () => {
      const urlValue = 'Article sur https://example.com/jardinage avec des liens';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(urlValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(urlValue);
    });

    it('devrait g√©rer les cha√Ænes contenant des emails', () => {
      const emailValue = 'Contact: jardinier@example.com pour plus d\'infos';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(emailValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(emailValue);
    });

    it('devrait g√©rer les cha√Ænes contenant des nombres', () => {
      const numberValue = 'Planter 15 graines √† 2cm de profondeur';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(numberValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(numberValue);
    });

    it('devrait g√©rer les cha√Ænes contenant des mesures', () => {
      const measureValue = 'Arroser 2.5L d\'eau par m¬≤ tous les 3-4 jours';
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange(measureValue);
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith(measureValue);
    });
  });

  describe('Int√©gration des deux m√©thodes', () => {
    it('devrait pouvoir appeler les deux m√©thodes ind√©pendamment', () => {
      spyOn(component.generate, 'emit');
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onGenerate();
      component.onArticleIdeaChange('Test idea');
      
      expect(component.generate.emit).toHaveBeenCalledTimes(1);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledTimes(1);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith('Test idea');
    });

    it('devrait pouvoir appeler les deux m√©thodes dans n\'importe quel ordre', () => {
      spyOn(component.generate, 'emit');
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onArticleIdeaChange('Premi√®re id√©e');
      component.onGenerate();
      component.onArticleIdeaChange('Deuxi√®me id√©e');
      
      expect(component.generate.emit).toHaveBeenCalledTimes(1);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledTimes(2);
    });

    it('devrait maintenir l\'√©tat correct entre les appels', () => {
      spyOn(component.generate, 'emit');
      spyOn(component.articleIdeaChange, 'emit');
      
      component.onGenerate();
      component.onArticleIdeaChange('Id√©e apr√®s g√©n√©ration');
      component.onGenerate();
      
      expect(component.generate.emit).toHaveBeenCalledTimes(2);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledTimes(1);
    });
  });

  describe('Tests de robustesse', () => {
    it('devrait g√©rer les appels multiples rapides sur onGenerate', () => {
      spyOn(component.generate, 'emit');
      
      // Simuler des clics rapides
      for (let i = 0; i < 20; i++) {
        component.onGenerate();
      }
      
      expect(component.generate.emit).toHaveBeenCalledTimes(20);
    });

    it('devrait g√©rer les changements rapides sur onArticleIdeaChange', () => {
      spyOn(component.articleIdeaChange, 'emit');
      
      // Simuler des changements rapides de texte
      for (let i = 0; i < 50; i++) {
        component.onArticleIdeaChange(`Valeur ${i}`);
      }
      
      expect(component.articleIdeaChange.emit).toHaveBeenCalledTimes(50);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledWith('Valeur 49');
    });

    it('devrait maintenir la coh√©rence des appels', () => {
      spyOn(component.generate, 'emit');
      spyOn(component.articleIdeaChange, 'emit');
      
      const generateCount = 5;
      const changeCount = 10;
      
      // Appels altern√©s
      for (let i = 0; i < Math.max(generateCount, changeCount); i++) {
        if (i < generateCount) component.onGenerate();
        if (i < changeCount) component.onArticleIdeaChange(`Value ${i}`);
      }
      
      expect(component.generate.emit).toHaveBeenCalledTimes(generateCount);
      expect(component.articleIdeaChange.emit).toHaveBeenCalledTimes(changeCount);
    });
  });

  describe('Propri√©t√©s du composant', () => {
    it('devrait avoir des valeurs par d√©faut correctes', () => {
      expect(component.articleIdea()).toBe('');
      expect(component.isGenerating()).toBe(false);
      expect(component.step()).toBe(0);
    });

    it('devrait avoir les outputs correctement d√©finis', () => {
      expect(component.generate).toBeDefined();
      expect(component.articleIdeaChange).toBeDefined();
    });
  });
});
