import { inject, Injectable } from '@angular/core';
import { from, Observable } from 'rxjs';
import { LoggingService } from '../../../../shared/services/logging.service';
import { SupabaseService } from '../../../../shared/services/supabase.service';
import { ImageProcessingService } from '../../../../shared/services/image-processing.service';
import { GetPromptsService } from '../get-prompts/get-prompts.service';
import { OpenaiApiService } from '../openai-api/openai-api.service';

@Injectable({ providedIn: 'root' })
export class ImageUploadService {
  private readonly loggingService = inject(LoggingService);
  private readonly supabaseService = inject(SupabaseService);
  private readonly imageProcessingService = inject(ImageProcessingService);
  private readonly getPromptsService = inject(GetPromptsService);
  private readonly openaiApiService = inject(OpenaiApiService);

  generateAndUploadImage(phraseAccroche: string, postId: number, useMock = false): Observable<string> {
    return from((async () => {
      console.log('üöÄ [IMAGE_UPLOAD_SVC] ===== D√âBUT G√âN√âRATION IMAGE PRINCIPALE =====', { postId, useMock });
      
      // √âtape 1 : G√©n√©rer l'image via DALL-E (ou mock)
      let b64_json: string | null;
      if (useMock) {
        // Mock avec une image plus grande (10x10 rouge) pour tester le redimensionnement
        b64_json = 'iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAFUlEQVR42mP8z8BQz0AEYBxVSF+FABJADveWkH6oAAAAAElFTkSuQmCC';
        console.log('üé≠ [IMAGE_UPLOAD_SVC] Mock image base64 (10√ó10)', { 
          postId,
          base64Length: b64_json.length 
        });
        this.loggingService.info('IMAGE_UPLOAD_SVC', 'üé≠ Mock image base64 pour upload', { postId });
      } else {
        console.log('üñºÔ∏è [IMAGE_UPLOAD_SVC] G√©n√©ration DALL-E...', { phraseAccroche });
        b64_json = await this.openaiApiService.imageGeneratorUrl(this.getPromptsService.getOpenAiPromptImageGenerator(phraseAccroche)) || null;
        console.log('üñºÔ∏è [IMAGE_UPLOAD_SVC] DALL-E r√©sultat:', { 
          success: !!b64_json,
          base64Length: b64_json?.length 
        });
      }

      if (!b64_json) {
        console.error('‚ùå [IMAGE_UPLOAD_SVC] Pas d\'image g√©n√©r√©e');
        this.loggingService.warn('IMAGE_UPLOAD_SVC', '‚ö†Ô∏è Pas d\'image g√©n√©r√©e');
        return 'https://via.placeholder.com/800x400/666/white?text=Aucune+Image+Generee';
      }

      try {
        // √âtape 2 : Traiter l'image (400√ó400, WebP, max 200Ko)
        console.log('üé® [IMAGE_UPLOAD_SVC] ===== TRAITEMENT IMAGE (400√ó400, WebP, max 200Ko) =====');
        this.loggingService.info('IMAGE_UPLOAD_SVC', 'üé® Traitement image principale (400√ó400, WebP, max 200Ko)');
        
        const processedImageData = await this.imageProcessingService.processImageForMainPost(b64_json);
        
        console.log('‚úÖ [IMAGE_UPLOAD_SVC] Image trait√©e:', { 
          tailleFinale: `${(processedImageData.length / 1024).toFixed(2)} Ko`,
          bytes: processedImageData.length
        });

        // √âtape 3 : Uploader l'image trait√©e
        console.log('üì§ [IMAGE_UPLOAD_SVC] ===== UPLOAD VERS SUPABASE STORAGE =====');
        const imageUrl = await this.supabaseService.uploadProcessedImageToStorage(postId, processedImageData);

        if (!imageUrl) {
          console.error('‚ùå [IMAGE_UPLOAD_SVC] Upload √©chou√© - URL null');
          this.loggingService.warn('IMAGE_UPLOAD_SVC', '‚ö†Ô∏è Upload √©chou√© - fallback');
          return 'https://via.placeholder.com/400x400/4caf50/white?text=Image+Jardin+Iris';
        }

        console.log('‚úÖ [IMAGE_UPLOAD_SVC] Image upload√©e:', { imageUrl });

        // √âtape 4 : Mettre √† jour l'URL dans la table post
        console.log('üíæ [IMAGE_UPLOAD_SVC] Mise √† jour DB...');
        await this.supabaseService.updateImageUrlPostByIdForm(postId, imageUrl);
        
        console.log('üéâ [IMAGE_UPLOAD_SVC] ===== SUCC√àS COMPLET ===== ', {
          postId,
          imageUrl,
          format: 'WebP',
          dimensions: '400√ó400',
          taille: `${(processedImageData.length / 1024).toFixed(2)} Ko`
        });
        
        this.loggingService.info('IMAGE_UPLOAD_SVC', '‚úÖ Upload image principale OK', {
          postId,
          imageUrl,
          format: 'WebP',
          dimensions: '400√ó400'
        });

        return imageUrl;
      } catch (error) {
        console.error('üí• [IMAGE_UPLOAD_SVC] ERREUR D√âTECT√âE:', error);
        this.loggingService.error('IMAGE_UPLOAD_SVC', '‚ùå Erreur upload image principale', error);
        
        // Fallback : tenter l'ancienne m√©thode sans traitement
        console.warn('‚ö†Ô∏è [IMAGE_UPLOAD_SVC] Tentative FALLBACK (sans traitement)...');
        this.loggingService.warn('IMAGE_UPLOAD_SVC', '‚ö†Ô∏è Tentative fallback sans traitement');
        try {
          const fallbackUrl = await this.supabaseService.uploadBase64ToSupabase(postId, b64_json);
          if (fallbackUrl) {
            await this.supabaseService.updateImageUrlPostByIdForm(postId, fallbackUrl);
            console.log('‚úÖ [IMAGE_UPLOAD_SVC] Fallback r√©ussi (PNG non optimis√©)', { fallbackUrl });
            this.loggingService.info('IMAGE_UPLOAD_SVC', '‚úÖ Fallback r√©ussi (image non optimis√©e)');
            return fallbackUrl;
          }
        } catch (fallbackError) {
          console.error('üí• [IMAGE_UPLOAD_SVC] Fallback √©chou√©:', fallbackError);
          this.loggingService.error('IMAGE_UPLOAD_SVC', '‚ùå Fallback √©chou√©', fallbackError);
        }
        
        return 'https://via.placeholder.com/400x400/4caf50/white?text=Image+Non+Disponible';
      }
    })());
  }
}


