import { inject, Injectable } from '@angular/core';
import { from, Observable } from 'rxjs';
import { SupabaseService } from '../../../../shared/services/supabase.service';
import { PostgrestError } from '@supabase/supabase-js';
import { LoggingService } from '../../../../shared/services/logging.service';

@Injectable({
  providedIn: 'root'
})
export class Infrastructure {
  private readonly supabaseService = inject(SupabaseService);
  private readonly loggingService = inject(LoggingService);

  getNextPostId(): Observable<number | PostgrestError> {
    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but getNextPostId()');
    const shouldReturnError = false;
    const shouldReturnMock = false
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: Impossible de r√©cup√©rer le prochain ID de post',
        details: 'Simulation d\'une erreur Postgrest pour tester la gestion d\'erreur',
        hint: 'V√©rifiez la connexion √† la base de donn√©es',
        code: 'TEST_ERROR_001',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e', mockError);
      return from(Promise.resolve(mockError));
    }
    if (shouldReturnMock) { 
      const dummyNextPostId = 666;
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data', { postId: dummyNextPostId });
      return from(Promise.resolve(dummyNextPostId));
    }
  
    return from(this.supabaseService.getNextPostId());
    
  }

  // M√©thodes factices pour les champs de la table post
  setTitre(): Observable<string | PostgrestError> {
    const dummyTitre = 'Comment cr√©er un jardin bio en permaculture';
    return from(Promise.resolve(dummyTitre));
  }

  setDescriptionMeteo(): Observable<string | PostgrestError> {
    const meteoData = 'M√©t√©o du jour: Ensoleill√© avec quelques nuages - Temp√©rature: 22¬∞C, Humidit√©: 65%';
    return from(Promise.resolve(meteoData));
  }

  setPhraseAccroche(): Observable<string | PostgrestError> {
    const dummyPhrase = "D√©couvrez les secrets d'un jardin bio qui respecte la nature et vous nourrit toute l'ann√©e.";
    return from(Promise.resolve(dummyPhrase));
  }

  setArticle(): Observable<string | PostgrestError> {
    const dummyArticle = `La permaculture est une approche holistique du jardinage qui imite les √©cosyst√®mes naturels.

## Les principes de base

1. **Observer et interagir** : Comprendre votre environnement
2. **Capturer et stocker l'√©nergie** : Utiliser le soleil, l'eau, le vent
3. **Obtenir une production** : R√©colter les fruits de votre travail
4. **Appliquer l'auto-r√©gulation** : Laisser la nature s'√©quilibrer

## Techniques pratiques

- **Compostage** : Recycler les d√©chets organiques
- **Paillage** : Prot√©ger le sol et retenir l'humidit√©
- **Association de plantes** : Cr√©er des synergies naturelles
`;
    return from(Promise.resolve(dummyArticle));
  }

  setNewHref(): Observable<string | PostgrestError> {
    const seoUrl = '/blog/comment-creer-jardin-bio-permaculture';
    return from(Promise.resolve(seoUrl));
  }

  setCitation(): Observable<string | PostgrestError> {
    const formattedCitation = '"La permaculture est l\'art de cr√©er des √©cosyst√®mes durables" - Bill Mollison';
    return from(Promise.resolve(formattedCitation));
  }

  setLienUrlArticle(): Observable<string | PostgrestError> {
    const dummyUrl = 'https://www.un-jardin-bio.com/permaculture-durable';
    return from(Promise.resolve(dummyUrl));
  }

  setImageUrl(): Observable<string | PostgrestError> {
    const generatedImageUrl = 'https://via.placeholder.com/800x400/4CAF50/FFFFFF?text=Jardin+Bio+Permaculture';
    return from(Promise.resolve(generatedImageUrl));
  }

  setCategorie(): Observable<string | PostgrestError> {
    const validatedCategory = 'permaculture';
    return from(Promise.resolve(validatedCategory));
  }
}
