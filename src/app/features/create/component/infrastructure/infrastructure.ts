import { inject, Injectable } from '@angular/core';
import { from, map, Observable, of, catchError } from 'rxjs';
import { SupabaseService } from '../../../../shared/services/supabase.service';
import { PostgrestError } from '@supabase/supabase-js';
import { LoggingService } from '../../../../shared/services/logging.service';
import { OpenaiApiService } from '../../services/openai-api/openai-api.service';
import { GoogleSearchService } from '../../services/google-search/google-search.service';
import { PexelsApiService } from '../../services/pexels-api/pexels-api.service';
import { parseJsonSafe, extractJSONBlock } from '../../utils/cleanJsonObject';
import { Post } from '../../types/post';
import { GetPromptsService } from '../../services/get-prompts/get-prompts.service';
import { environment } from '../../../../../environments/environment';
import { InternalImageData } from '../../types/internalImageData';
import { AddScientificNameService } from '../../services/add-scientific-name/add-scientific-name.service';
import { InternalImageService } from '../../services/internal-image/internal-image.service';
import { ImageUploadService } from '../../services/image-upload/image-upload.service';
import { VideoService } from '../../services/video/video.service';
import { VegetalService } from '../../services/vegetal/vegetal.service';


@Injectable({
  providedIn: 'root'
})
export class Infrastructure {
  private readonly supabaseService = inject(SupabaseService);
  private readonly loggingService = inject(LoggingService);
  private readonly getPromptsService = inject(GetPromptsService);
  private readonly openaiApiService = inject(OpenaiApiService);
  private readonly googleSearchService = inject(GoogleSearchService);
  private readonly pexelsApiService = inject(PexelsApiService);
  private readonly addScientificNameService = inject(AddScientificNameService);
  // new dedicated services
  private readonly internalImageService = inject(InternalImageService);
  private readonly imageUploadService = inject(ImageUploadService);
  private readonly videoService = inject(VideoService);
  private readonly vegetalService = inject(VegetalService);

  /**
   * M√©thode de test pour v√©rifier que les erreurs remontent bien dans le store
   * √Ä utiliser temporairement pour d√©bugger
   */
  testError(): Observable<string | PostgrestError> {
    this.loggingService.info('INFRASTRUCTURE', 'üß™ Test d\'erreur d√©clench√©');
    
    return this.wrapWithErrorHandling(
      () => from(Promise.reject(new Error('Erreur de test pour v√©rifier la remont√©e dans le store'))),
      'testError',
      'Test de la gestion d\'erreur'
    );
  }
  
  /**
   * M√©thode de test pour simuler une erreur Supabase Storage
   */
  testSupabaseStorageError(): Observable<string | PostgrestError> {
    this.loggingService.info('INFRASTRUCTURE', 'üß™ Test d\'erreur Supabase Storage');
    
    return from((async () => {
      // Simuler l'erreur Supabase Storage
      const supabaseError = {
        statusCode: '403',
        error: 'Unauthorized', 
        message: 'new row violates row-level security policy'
      };
      
      const warningMessage = `Erreur Supabase Storage (test): ${supabaseError.message} - Image par d√©faut utilis√©e`;
      this.signalWarning(warningMessage);
      
      // Retourner l'image de fallback comme dans le vrai code
      return 'https://via.placeholder.com/800x400/4caf50/white?text=Test+Erreur+Storage';
    })());
  }

  /**
   * M√©thode g√©n√©rique pour g√©rer les erreurs et les transformer en PostgrestError
   * pour un traitement uniforme dans le store
   */
  private handleError(error: any, context: string, methodName: string): PostgrestError {
    this.loggingService.error('INFRASTRUCTURE', `Erreur dans ${methodName} - ${context}`, error);
    
    // Si c'est d√©j√† une PostgrestError, la retourner telle quelle
    if (error && typeof error === 'object' && 'message' in error && 'code' in error && 'name' in error) {
      return error as PostgrestError;
    }
    
    // Cr√©er une PostgrestError standardis√©e
    const postgrestError: PostgrestError = {
      message: error?.message || `Erreur dans ${methodName}: ${String(error)}`,
      details: `Contexte: ${context}. Erreur originale: ${error?.stack || String(error)}`,
      hint: `V√©rifiez les logs pour plus de d√©tails sur l'erreur dans ${methodName}`,
      code: error?.code || `INFRA_ERROR_${methodName.toUpperCase()}`,
      name: 'PostgrestError'
    };
    
    return postgrestError;
  }

  /**
   * Interface pour signaler des warnings au store
   */
  private warningCallback?: (message: string) => void;
  
  setWarningCallback(callback: (message: string) => void) {
    this.warningCallback = callback;
  }
  
  private signalWarning(message: string) {
    if (this.warningCallback) {
      this.warningCallback(message);
    }
  }

  /**
   * Wrapper g√©n√©rique pour les op√©rations asynchrones avec gestion d'erreur
   */
  private wrapWithErrorHandling<T>(operation: () => Observable<T>, methodName: string, context: string = ''): Observable<T | PostgrestError> {
    return operation().pipe(
      catchError(error => {
        const postgrestError = this.handleError(error, context, methodName);
        return of(postgrestError);
      })
    );
  }

  getNextPostId(): Observable<number | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: Impossible de r√©cup√©rer le prochain ID de post',
        details: 'Simulation d\'une erreur Postgrest pour tester la gestion d\'erreur',
        hint: 'V√©rifiez la connexion √† la base de donn√©es',
        code: 'TEST_ERROR_001',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e', mockError);
      return from(Promise.resolve(mockError));
    }
    if (shouldReturnMock) { 
      const dummyNextPostId = 666;
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data', { postId: dummyNextPostId });
      return from(Promise.resolve(dummyNextPostId));
    }
  
    return this.wrapWithErrorHandling(
      () => from(this.supabaseService.getNextPostId()),
      'getNextPostId',
      'R√©cup√©ration du prochain ID de post depuis Supabase'
    );
  }

  getLastPostTitreAndId(): Observable<{ titre: string; id: number; new_href: string }[] | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: Impossible de r√©cup√©rer les derniers posts',
        details: 'Simulation d\'une erreur lors de la r√©cup√©ration des titres et IDs',
        hint: 'V√©rifiez la table posts dans Supabase',
        code: 'TEST_ERROR_002',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour getLastPostTitreAndId', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyPosts = [
        { titre: "Comment cr√©er un jardin √©cologique en ville ?", id: 665, new_href: "jardin-ecologique-ville-guide-complet" },
        { titre: "Les meilleures plantes vivaces pour un jardin bruxellois", id: 664, new_href: "plantes-vivaces-jardin-bruxelles-selection" },
        { titre: "Cultiver des l√©gumes bio sur balcon : guide pratique", id: 663, new_href: "legumes-bio-balcon-culture-urbaine" },
        { titre: "Arrosage intelligent : √©conomiser l'eau au jardin", id: 662, new_href: "arrosage-intelligent-economie-eau-jardin" },
        { titre: "Compostage domestique : transformer ses d√©chets en or noir", id: 661, new_href: "compostage-domestique-dechets-organiques" },
        { titre: "Lutter contre les limaces naturellement", id: 660, new_href: "lutte-naturelle-limaces-escargots-jardin" },
        { titre: "Cr√©er une prairie fleurie pour la biodiversit√©", id: 659, new_href: "prairie-fleurie-biodiversite-pollinisateurs" },
        { titre: "Taille des rosiers : quand et comment proc√©der", id: 658, new_href: "taille-rosiers-technique-periode-optimale" },
        { titre: "Installer un syst√®me de r√©cup√©ration d'eau de pluie", id: 657, new_href: "recuperation-eau-pluie-installation-jardin" },
        { titre: "Permaculture urbaine : principes et applications", id: 656, new_href: "permaculture-urbaine-principes-pratiques" }
      ];
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour getLastPostTitreAndId', { count: dummyPosts.length });
      return from(Promise.resolve(dummyPosts));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but getLastPostTitreAndId()');
    return this.wrapWithErrorHandling(
      () => from(this.supabaseService.getLastPostTitreAndId(10)),
      'getLastPostTitreAndId',
      'R√©cup√©ration des derniers posts depuis Supabase'
    );
  }

  setPost(articleIdea: string): Observable<Post | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la g√©n√©ration d\'article',
        details: 'Simulation d\'une erreur lors de la g√©n√©ration d\'article avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_003',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setPost', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyPost: Post = {
        titre: "Comment cultiver des tomates cerises en pot sur son balcon",
        description_meteo: "Aujourd'hui, le ciel est partiellement nuageux avec des temp√©ratures de 22¬∞C, parfait pour jardiner en ext√©rieur sans risque de coup de soleil et des accacias fleurissent.",
        phrase_accroche: "Transformez votre balcon en mini-potager productif ! D√©couvrez tous les secrets pour r√©ussir la culture des tomates cerises en pot et savourer vos propres l√©gumes bio.",
        article: `<span id='paragraphe-1'><h4>Choisir la bonne vari√©t√© de tomates cerises pour la culture en pot</h4><article>Pour r√©ussir la culture de tomates cerises sur votre balcon, le choix de la vari√©t√© est crucial. Je recommande particuli√®rement les vari√©t√©s 'Sweet 100', 'Cherry Belle' ou 'Tumbling Tom' qui s'adaptent parfaitement √† la culture en contenants. Ces vari√©t√©s compactes produisent abondamment et r√©sistent bien aux conditions parfois difficiles d'un balcon urbain. <em>La vari√©t√© 'Sweet 100' peut produire jusqu'√† 100 petites tomates par grappe</em>, tandis que 'Tumbling Tom' est id√©ale pour les jardini√®res suspendues gr√¢ce √† son port retombant naturel.</article></span>
<span id='paragraphe-2'><h4>Pr√©parer le substrat et choisir les contenants adapt√©s</h4><article>Un bon drainage est essentiel pour √©viter le pourrissement des racines. Utilisez un m√©lange compos√© de 50% de terreau universel, 30% de compost bien d√©compos√© et 20% de perlite ou de vermiculite pour am√©liorer le drainage. <b>Le contenant doit faire au minimum 40 cm de profondeur et 30 cm de diam√®tre</b> pour permettre un bon d√©veloppement racinaire. N'oubliez pas de percer plusieurs trous de drainage au fond du pot et d'ajouter une couche de graviers ou de billes d'argile de 3-4 cm.</article></span>
<span id='paragraphe-3'><h4>Techniques d'arrosage et de fertilisation pour maximiser la production</h4><article>L'arrosage des roses en pot demande une attention particuli√®re car le substrat s√®che plus vite qu'en pleine terre. Arrosez r√©guli√®rement mais sans exc√®s, en maintenant le sol l√©g√®rement humide sans jamais le d√©tremper. <u>Un paillis organique autour du pied permet de conserver l'humidit√© et de r√©duire la fr√©quence d'arrosage</u>. C√¥t√© fertilisation, apportez un engrais riche en potassium toutes les deux semaines d√®s l'apparition des premi√®res fleurs pour favoriser la fructification.</article></span>
<span id='paragraphe-4'><h4>Taille et entretien pour optimiser la r√©colte</h4><article>La taille des tomates cerises en pot est simplifi√©e mais reste importante. Supprimez r√©guli√®rement les gourmands (pousses qui se d√©veloppent √† l'aisselle des feuilles) pour concentrer l'√©nergie de la plante sur la production de fruits. <em>Pincez √©galement les feuilles du bas qui touchent le sol pour √©viter les maladies cryptogamiques</em>. Un tuteurage solide est indispensable : utilisez un tuteur de 1,50 m minimum ou installez un treillis contre le mur de votre balcon.</article></span>
<span id='paragraphe-5'><h4>Pr√©venir et traiter les maladies courantes en culture urbaine</h4><article>Les tomates en pot sur balcon sont particuli√®rement sensibles au mildiou et √† l'o√Ødium √† cause de l'humidit√© stagnante. Pr√©venez ces probl√®mes en espa√ßant suffisamment vos plants et en √©vitant d'arroser le feuillage. <b>Une pulv√©risation pr√©ventive de purin d'ortie dilu√© √† 10% une fois par semaine renforce les d√©fenses naturelles</b>. Si des taches apparaissent sur les feuilles, retirez-les imm√©diatement et traitez avec une solution de bicarbonate de soude (1 cuill√®re √† soupe par litre d'eau).</article></span>`,
        citation: "Le jardinage, c'est l'art de cultiver la patience autant que les plantes. - Proverbe jardinier",
        lien_url_article: { lien1: "https://www.jardin-iris.be/blog/tomates-cerises-balcon-culture-pot" },
        categorie: "potager",
        new_href: "culture-tomates-cerises-pot-balcon-guide"
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setPost', { titre: dummyPost.titre });
      return from(Promise.resolve(dummyPost));
    }
    
    const prompt = this.getPromptsService.generateArticle(articleIdea);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setPost')).pipe(
        map(result => {
          if (result === null) {
            throw new Error('Aucun r√©sultat retourn√© par l\'API OpenAI');
          }
          return parseJsonSafe(extractJSONBlock(result));
        })
      ),
      'setPost',
      `G√©n√©ration d'article avec OpenAI pour l'id√©e: ${articleIdea}`
    );
  }

  setImageUrl(phraseAccroche: string, postId: number): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    const shouldMockImageGeneration = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la g√©n√©ration d\'image',
        details: 'Simulation d\'une erreur lors de la g√©n√©ration d\'image',
        hint: 'V√©rifiez la cl√© API et le storage',
        code: 'TEST_ERROR_004',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® Erreur simul√©e setImageUrl', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyImageUrl = 'https://via.placeholder.com/800x400/4caf50/white?text=Image+Mock';
      this.loggingService.info('INFRASTRUCTURE', 'üì® Mock imageUrl', { imageUrl: dummyImageUrl, postId });
      return from(Promise.resolve(dummyImageUrl));
    }
    
    return this.wrapWithErrorHandling(
      () => this.imageUploadService.generateAndUploadImage(phraseAccroche, postId, shouldMockImageGeneration),
      'setImageUrl',
      `G√©n√©ration et upload d'image pour le post ${postId} avec la phrase: ${phraseAccroche}`
    );
  }

  setVideo(phrase_accroche: string, postId: number): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec recherche vid√©o',
        details: 'Simulation d\'erreur YouTube/OpenAI',
        hint: 'V√©rifiez cl√©/quotas',
        code: 'TEST_ERROR_005',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® Erreur simul√©e setVideo', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummy = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';
      this.loggingService.info('INFRASTRUCTURE', 'üì® Mock vid√©o', { dummy, postId });
      return from(Promise.resolve(dummy));
    }

    return this.wrapWithErrorHandling(
      () => this.videoService.findBestVideoUrl(phrase_accroche, false),
      'setVideo',
      `Recherche de vid√©o YouTube pour la phrase: ${phrase_accroche}`
    );
  }

  setFaq(article: string): Observable<{ question: string; response: string }[] | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la g√©n√©ration FAQ',
        details: 'Simulation d\'une erreur lors de la g√©n√©ration de la FAQ avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_006',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setFaq', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyFaq = [
        {
          question: "√Ä quelle fr√©quence dois-je arroser mes tomates cerises en pot ?",
          response: "Arrosez vos tomates cerises en pot tous les 2-3 jours en √©t√©, en v√©rifiant que la terre reste l√©g√®rement humide mais jamais d√©tremp√©e. La fr√©quence d√©pend de la temp√©rature, du vent et de la taille du pot."
        },
        {
          question: "Puis-je cultiver des tomates cerises sur un balcon orient√© nord ?",
          response: "Un balcon orient√© nord n'est pas id√©al car les tomates ont besoin de 6-8h de soleil par jour minimum. Privil√©giez les balcons sud, sud-est ou sud-ouest. √Ä d√©faut, choisissez des vari√©t√©s tr√®s pr√©coces et r√©sistantes."
        },
        {
          question: "Quand r√©colter les tomates cerises pour qu'elles soient les plus savoureuses ?",
          response: "R√©coltez les tomates cerises lorsqu'elles sont bien color√©es et l√©g√®rement souples au toucher. Pour un go√ªt optimal, cueillez-les le matin apr√®s la ros√©e, quand elles sont fra√Æches et gorg√©es de saveur."
        },
        {
          question: "Comment √©viter que mes tomates cerises se fendent ?",
          response: "Les tomates se fendent √† cause d'arrosages irr√©guliers. Maintenez une humidit√© constante avec un paillis, arrosez r√©guli√®rement sans exc√®s, et √©vitez les gros apports d'eau apr√®s une p√©riode s√®che."
        },
        {
          question: "Est-il n√©cessaire de tuteurer les tomates cerises en pot ?",
          response: "Oui, m√™me les vari√©t√©s naines ont besoin d'un tuteur car le poids des fruits peut faire plier les tiges. Utilisez un tuteur de 1,20-1,50m ou installez un treillis pour soutenir la croissance."
        }
      ];
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setFaq', { count: dummyFaq.length });
      return from(Promise.resolve(dummyFaq));
    }
    
    const prompt = this.getPromptsService.getPromptFaq(article);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setFaq')).pipe(
        map(result => {
          if (result === null) {
            throw new Error('Aucun r√©sultat retourn√© par l\'API OpenAI');
          }
          return JSON.parse(extractJSONBlock(result))
        })
      ),
      'setFaq',
      `G√©n√©ration de FAQ pour un article de ${article.length} caract√®res`
    );
  }

  internalImage(article: string, postId: number): Observable<{ article: string; images: InternalImageData[] } | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: internalImage',
        details: 'Simulation d\'erreur Pexels/OpenAI',
        hint: 'V√©rifiez API keys',
        code: 'TEST_ERROR_INTERNAL_IMAGE',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® Erreur simul√©e internalImage', mockError);
      return from(Promise.resolve(mockError));
    }

    if (shouldReturnMock) {
      const mockImages: InternalImageData[] = [
        { chapitre_id: 1, chapitre_key_word: 'garden', url_Image: 'https://images.pexels.com/photos/1000445/pexels-photo-1000445.jpeg', explanation_word: 'Image de jardin' },
        { chapitre_id: 2, chapitre_key_word: 'plants', url_Image: 'https://images.pexels.com/photos/1000446/pexels-photo-1000446.jpeg', explanation_word: 'Image de plantes' }
      ];
      this.loggingService.info('INFRASTRUCTURE', 'üì® Mock internalImage', { count: mockImages.length });
      return from(Promise.resolve({ article, images: mockImages }));
    }
    
    return this.wrapWithErrorHandling(
      () => this.internalImageService.generateInternalImages(article, postId, (msg) => this.signalWarning(msg)),
    'internalImage',
    `Ajout d'images internes pour ${environment.globalNbChapter} chapitres dans l'article du post ${postId}`
    );
  }

  setInternalLink(article: string, postTitreAndId: { titre: string; id: number; new_href: string }[]): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de l\'ajout des liens internes',
        details: 'Simulation d\'une erreur lors de l\'ajout de liens internes avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_007',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setInternalLink', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const upgradedArticle = article.replace(
        /jardinage/gi, 
        '<a class="myTooltip" href="https://www.jardin-iris.be/jardinier-paysagiste-belgique-blog/guide-jardinage-debutant.html" title="Guide complet du jardinage">jardinage<span class="myTooltiptext">Guide complet du jardinage</span></a>'
      ).replace(
        /compost/gi,
        '<a class="myTooltip" href="https://www.jardin-iris.be/jardinier-paysagiste-belgique-blog/compostage-domestique-dechets-organiques.html" title="Tout savoir sur le compostage">compost<span class="myTooltiptext">Tout savoir sur le compostage</span></a>'
      );
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setInternalLink', { originalLength: article.length, upgradedLength: upgradedArticle.length });
      return from(Promise.resolve(upgradedArticle));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but setInternalLink()', { articleLength: article.length, postsCount: postTitreAndId.length });
    
    const prompt = this.getPromptsService.addInternalLinkInArticle(article, postTitreAndId);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setInternalLink')).pipe(
        map(result => {
          if (result === null) { throw new Error('Aucun r√©sultat retourn√© par l\'API OpenAI pour les liens internes'); }
          const raw = extractJSONBlock(result);
          try {
            const data: { upgraded: string; idToRemove?: string } = JSON.parse(raw);
            return data.upgraded;
          } catch (error) {
            this.loggingService.error('INFRASTRUCTURE', 'Erreur lors du parsing du r√©sultat setInternalLink', error);
            console.error('JSON.parse failed:', error);
            console.error('--- snippet (start) ---\n', raw.slice(0, 1000));
            throw new Error('Erreur lors du parsing du r√©sultat des liens internes');
          }
        })
      ),
      'setInternalLink',
      `Ajout de liens internes dans un article de ${article.length} caract√®res avec ${postTitreAndId.length} posts disponibles`
    );
  }

  vegetal(article: string): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: vegetal',
        details: 'Simulation d\'erreur OpenAI/iNaturalist',
        hint: 'V√©rifiez les APIs',
        code: 'TEST_ERROR_008',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® Erreur simul√©e vegetal', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      let counter = 1;
      const upgraded = article.replace(/tomates cerises/gi, `<span class="inat-vegetal" data-taxon-name="Solanum lycopersicum" data-paragraphe-id="mock-${counter++}">tomates cerises<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/560287697/large.jpg" alt="Solanum lycopersicum"/></div></span>`);
      this.loggingService.info('INFRASTRUCTURE', 'üì® Mock vegetal');
      return from(Promise.resolve(upgraded));
    }

    return this.wrapWithErrorHandling(
      () => this.vegetalService.enrichArticleWithBotanicalNames(article, false),
    'vegetal',
      `Enrichissement botanique complet de l'article (${article.length} caract√®res)`
    );
  }

  savePostComplete(post: Post): Observable<boolean | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la sauvegarde du post',
        details: 'Simulation d\'une erreur lors de la sauvegarde du post complet',
        hint: 'V√©rifiez la connexion √† Supabase',
        code: 'TEST_ERROR_009',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour savePostComplete', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour savePostComplete', { postId: post.id });
      return from(Promise.resolve(true));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üíæ Sauvegarde post complet', { postId: post.id });
    
    return this.wrapWithErrorHandling(
      () => from(this.supabaseService.updatePostComplete(post)).pipe(
        map(() => {
          this.loggingService.info('INFRASTRUCTURE', '‚úÖ Post sauvegard√© dans Supabase');
          return true;
        })
      ),
      'savePostComplete',
      `Sauvegarde du post ${post.id} dans Supabase`
    );
  }

  saveFaqItems(postId: number, faqItems: { question: string; response: string }[]): Observable<boolean | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la sauvegarde des FAQ',
        details: 'Simulation d\'une erreur lors de la sauvegarde des items FAQ',
        hint: 'V√©rifiez la connexion √† Supabase',
        code: 'TEST_ERROR_010',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour saveFaqItems', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour saveFaqItems', { postId, count: faqItems.length });
      return from(Promise.resolve(true));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üíæ Sauvegarde FAQ', { postId, count: faqItems.length });
    
    return this.wrapWithErrorHandling(
      () => from(this.supabaseService.saveFaqForPost(postId, faqItems)).pipe(
        map(() => {
          this.loggingService.info('INFRASTRUCTURE', '‚úÖ FAQ sauvegard√©e dans Supabase');
          return true;
        })
      ),
      'saveFaqItems',
      `Sauvegarde de ${faqItems.length} items FAQ pour le post ${postId}`
    );
  }

  saveInternalImages(postId: number, images: InternalImageData[]): Observable<boolean | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la sauvegarde des images internes',
        details: 'Simulation d\'une erreur lors de la sauvegarde des images internes',
        hint: 'V√©rifiez la connexion √† Supabase',
        code: 'TEST_ERROR_011',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour saveInternalImages', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour saveInternalImages', { postId, count: images.length });
      return from(Promise.resolve(true));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üíæ Sauvegarde images internes', { postId, count: images.length });
    
    return this.wrapWithErrorHandling(
      () => from(Promise.all(
        images.map(image => 
          this.supabaseService.setNewUrlImagesChapitres(
            image.url_Image,
            image.chapitre_id,
            postId,
            image.chapitre_key_word,
            image.explanation_word
          )
        )
      )).pipe(
        map(() => {
          this.loggingService.info('INFRASTRUCTURE', '‚úÖ Images internes sauvegard√©es dans Supabase');
          return true;
        })
      ),
      'saveInternalImages',
      `Sauvegarde de ${images.length} images internes pour le post ${postId}`
    );
  }
  
}
