import { inject, Injectable } from '@angular/core';
import { from, map, Observable, of, switchMap, concatMap, toArray, catchError } from 'rxjs';
import { SupabaseService } from '../../../../shared/services/supabase.service';
import { PostgrestError } from '@supabase/supabase-js';
import { LoggingService } from '../../../../shared/services/logging.service';
import { OpenaiApiService } from '../../services/openai-api/openai-api.service';
import { GoogleSearchService, VideoInfo } from '../../services/google-search/google-search.service';
import { PexelsApiService } from '../../services/pexels-api/pexels-api.service';
import { parseJsonSafe, extractJSONBlock } from '../../utils/cleanJsonObject';
import { Post } from '../../types/post';
import { GetPromptsService } from '../../services/get-prompts/get-prompts.service';
import { environment } from '../../../../../environments/environment';
import { InternalImageData } from '../../types/internalImageData';
import { AddScientificNameService } from '../../services/add-scientific-name/add-scientific-name.service';


@Injectable({
  providedIn: 'root'
})
export class Infrastructure {
  private readonly supabaseService = inject(SupabaseService);
  private readonly loggingService = inject(LoggingService);
  private readonly getPromptsService = inject(GetPromptsService);
  private readonly openaiApiService = inject(OpenaiApiService);
  private readonly googleSearchService = inject(GoogleSearchService);
  private readonly pexelsApiService = inject(PexelsApiService);
  private readonly addScientificNameService = inject(AddScientificNameService);

  /**
   * M√©thode g√©n√©rique pour g√©rer les erreurs et les transformer en PostgrestError
   * pour un traitement uniforme dans le store
   */
  private handleError(error: any, context: string, methodName: string): PostgrestError {
    this.loggingService.error('INFRASTRUCTURE', `Erreur dans ${methodName} - ${context}`, error);
    
    // Si c'est d√©j√† une PostgrestError, la retourner telle quelle
    if (error && typeof error === 'object' && 'message' in error && 'code' in error && 'name' in error) {
      return error as PostgrestError;
    }
    
    // Cr√©er une PostgrestError standardis√©e
    const postgrestError: PostgrestError = {
      message: error?.message || `Erreur dans ${methodName}: ${String(error)}`,
      details: `Contexte: ${context}. Erreur originale: ${error?.stack || String(error)}`,
      hint: `V√©rifiez les logs pour plus de d√©tails sur l'erreur dans ${methodName}`,
      code: error?.code || `INFRA_ERROR_${methodName.toUpperCase()}`,
      name: 'PostgrestError'
    };
    
    return postgrestError;
  }

  /**
   * Wrapper g√©n√©rique pour les op√©rations asynchrones avec gestion d'erreur
   */
  private wrapWithErrorHandling<T>(
    operation: () => Observable<T>, 
    methodName: string, 
    context: string = ''
  ): Observable<T | PostgrestError> {
    return operation().pipe(
      catchError(error => {
        const postgrestError = this.handleError(error, context, methodName);
        return of(postgrestError);
      })
    );
  }

  getNextPostId(): Observable<number | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: Impossible de r√©cup√©rer le prochain ID de post',
        details: 'Simulation d\'une erreur Postgrest pour tester la gestion d\'erreur',
        hint: 'V√©rifiez la connexion √† la base de donn√©es',
        code: 'TEST_ERROR_001',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e', mockError);
      return from(Promise.resolve(mockError));
    }
    if (shouldReturnMock) { 
      const dummyNextPostId = 666;
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data', { postId: dummyNextPostId });
      return from(Promise.resolve(dummyNextPostId));
    }
  
    return this.wrapWithErrorHandling(
      () => from(this.supabaseService.getNextPostId()),
      'getNextPostId',
      'R√©cup√©ration du prochain ID de post depuis Supabase'
    );
  }

  getLastPostTitreAndId(): Observable<{ titre: string; id: number; new_href: string }[] | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: Impossible de r√©cup√©rer les derniers posts',
        details: 'Simulation d\'une erreur lors de la r√©cup√©ration des titres et IDs',
        hint: 'V√©rifiez la table posts dans Supabase',
        code: 'TEST_ERROR_002',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour getLastPostTitreAndId', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyPosts = [
        { titre: "Comment cr√©er un jardin √©cologique en ville ?", id: 665, new_href: "jardin-ecologique-ville-guide-complet" },
        { titre: "Les meilleures plantes vivaces pour un jardin bruxellois", id: 664, new_href: "plantes-vivaces-jardin-bruxelles-selection" },
        { titre: "Cultiver des l√©gumes bio sur balcon : guide pratique", id: 663, new_href: "legumes-bio-balcon-culture-urbaine" },
        { titre: "Arrosage intelligent : √©conomiser l'eau au jardin", id: 662, new_href: "arrosage-intelligent-economie-eau-jardin" },
        { titre: "Compostage domestique : transformer ses d√©chets en or noir", id: 661, new_href: "compostage-domestique-dechets-organiques" },
        { titre: "Lutter contre les limaces naturellement", id: 660, new_href: "lutte-naturelle-limaces-escargots-jardin" },
        { titre: "Cr√©er une prairie fleurie pour la biodiversit√©", id: 659, new_href: "prairie-fleurie-biodiversite-pollinisateurs" },
        { titre: "Taille des rosiers : quand et comment proc√©der", id: 658, new_href: "taille-rosiers-technique-periode-optimale" },
        { titre: "Installer un syst√®me de r√©cup√©ration d'eau de pluie", id: 657, new_href: "recuperation-eau-pluie-installation-jardin" },
        { titre: "Permaculture urbaine : principes et applications", id: 656, new_href: "permaculture-urbaine-principes-pratiques" }
      ];
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour getLastPostTitreAndId', { count: dummyPosts.length });
      return from(Promise.resolve(dummyPosts));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but getLastPostTitreAndId()');
    return this.wrapWithErrorHandling(
      () => from(this.supabaseService.getLastPostTitreAndId(10)),
      'getLastPostTitreAndId',
      'R√©cup√©ration des derniers posts depuis Supabase'
    );
  }

  setPost(articleIdea: string): Observable<Post | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la g√©n√©ration d\'article',
        details: 'Simulation d\'une erreur lors de la g√©n√©ration d\'article avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_003',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setPost', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyPost: Post = {
        titre: "Comment cultiver des tomates cerises en pot sur son balcon",
        description_meteo: "Aujourd'hui, le ciel est partiellement nuageux avec des temp√©ratures de 22¬∞C, parfait pour jardiner en ext√©rieur sans risque de coup de soleil et des accacias fleurissent.",
        phrase_accroche: "Transformez votre balcon en mini-potager productif ! D√©couvrez tous les secrets pour r√©ussir la culture des tomates cerises en pot et savourer vos propres l√©gumes bio.",
        article: `<span id='paragraphe-1'><h4>Choisir la bonne vari√©t√© de tomates cerises pour la culture en pot</h4><article>Pour r√©ussir la culture de tomates cerises sur votre balcon, le choix de la vari√©t√© est crucial. Je recommande particuli√®rement les vari√©t√©s 'Sweet 100', 'Cherry Belle' ou 'Tumbling Tom' qui s'adaptent parfaitement √† la culture en contenants. Ces vari√©t√©s compactes produisent abondamment et r√©sistent bien aux conditions parfois difficiles d'un balcon urbain. <em>La vari√©t√© 'Sweet 100' peut produire jusqu'√† 100 petites tomates par grappe</em>, tandis que 'Tumbling Tom' est id√©ale pour les jardini√®res suspendues gr√¢ce √† son port retombant naturel.</article></span>
<span id='paragraphe-2'><h4>Pr√©parer le substrat et choisir les contenants adapt√©s</h4><article>Un bon drainage est essentiel pour √©viter le pourrissement des racines. Utilisez un m√©lange compos√© de 50% de terreau universel, 30% de compost bien d√©compos√© et 20% de perlite ou de vermiculite pour am√©liorer le drainage. <b>Le contenant doit faire au minimum 40 cm de profondeur et 30 cm de diam√®tre</b> pour permettre un bon d√©veloppement racinaire. N'oubliez pas de percer plusieurs trous de drainage au fond du pot et d'ajouter une couche de graviers ou de billes d'argile de 3-4 cm.</article></span>
<span id='paragraphe-3'><h4>Techniques d'arrosage et de fertilisation pour maximiser la production</h4><article>L'arrosage des roses en pot demande une attention particuli√®re car le substrat s√®che plus vite qu'en pleine terre. Arrosez r√©guli√®rement mais sans exc√®s, en maintenant le sol l√©g√®rement humide sans jamais le d√©tremper. <u>Un paillis organique autour du pied permet de conserver l'humidit√© et de r√©duire la fr√©quence d'arrosage</u>. C√¥t√© fertilisation, apportez un engrais riche en potassium toutes les deux semaines d√®s l'apparition des premi√®res fleurs pour favoriser la fructification.</article></span>
<span id='paragraphe-4'><h4>Taille et entretien pour optimiser la r√©colte</h4><article>La taille des tomates cerises en pot est simplifi√©e mais reste importante. Supprimez r√©guli√®rement les gourmands (pousses qui se d√©veloppent √† l'aisselle des feuilles) pour concentrer l'√©nergie de la plante sur la production de fruits. <em>Pincez √©galement les feuilles du bas qui touchent le sol pour √©viter les maladies cryptogamiques</em>. Un tuteurage solide est indispensable : utilisez un tuteur de 1,50 m minimum ou installez un treillis contre le mur de votre balcon.</article></span>
<span id='paragraphe-5'><h4>Pr√©venir et traiter les maladies courantes en culture urbaine</h4><article>Les tomates en pot sur balcon sont particuli√®rement sensibles au mildiou et √† l'o√Ødium √† cause de l'humidit√© stagnante. Pr√©venez ces probl√®mes en espa√ßant suffisamment vos plants et en √©vitant d'arroser le feuillage. <b>Une pulv√©risation pr√©ventive de purin d'ortie dilu√© √† 10% une fois par semaine renforce les d√©fenses naturelles</b>. Si des taches apparaissent sur les feuilles, retirez-les imm√©diatement et traitez avec une solution de bicarbonate de soude (1 cuill√®re √† soupe par litre d'eau).</article></span>`,
        citation: "Le jardinage, c'est l'art de cultiver la patience autant que les plantes. - Proverbe jardinier",
        lien_url_article: { lien1: "https://www.jardin-iris.be/blog/tomates-cerises-balcon-culture-pot" },
        categorie: "potager",
        new_href: "culture-tomates-cerises-pot-balcon-guide"
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setPost', { titre: dummyPost.titre });
      return from(Promise.resolve(dummyPost));
    }
    
    const prompt = this.getPromptsService.generateArticle(articleIdea);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setPost')).pipe(
        map(result => {
          if (result === null) {
            throw new Error('Aucun r√©sultat retourn√© par l\'API OpenAI');
          }
          return parseJsonSafe(extractJSONBlock(result));
        })
      ),
      'setPost',
      `G√©n√©ration d'article avec OpenAI pour l'id√©e: ${articleIdea}`
    );
  }

  setImageUrl(phraseAccroche: string, postId: number): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la g√©n√©ration d\'image',
        details: 'Simulation d\'une erreur lors de la g√©n√©ration d\'image avec OpenAI DALL-E',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits DALL-E disponibles',
        code: 'TEST_ERROR_004',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setImageUrl', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyImageUrl = `https://images.unsplash.com/photo-1416879595882-3373a0480b5b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80`;
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setImageUrl', { imageUrl: dummyImageUrl, postId });
      return from(Promise.resolve(dummyImageUrl));
    }
    
    return this.wrapWithErrorHandling(
      () => from((async () => {
        // 1Ô∏è‚É£ G√©n√©rer l'image en base64
        const b64_json = await this.openaiApiService.imageGeneratorUrl(this.getPromptsService.getOpenAiPromptImageGenerator(phraseAccroche));
        // 2Ô∏è‚É£ Convertir le base64 en Blob
        if (b64_json) {
          // 3Ô∏è‚É£ Uploader le Blob dans Supabase Storage
          const imageUrl = await this.supabaseService.uploadBase64ToSupabase(postId, b64_json);
          if (!imageUrl) {
            throw new Error('√âchec de l\'upload de l\'image vers Supabase');
          }
          // 4Ô∏è‚É£ Mettre √† jour le post avec l'URL publique
          await this.supabaseService.updateImageUrlPostByIdForm(postId, imageUrl);
          return imageUrl;
        }
        throw new Error('√âchec de la g√©n√©ration de l\'image par OpenAI');
      })()),
      'setImageUrl',
      `G√©n√©ration et upload d'image pour le post ${postId} avec la phrase: ${phraseAccroche}`
    );
  }

  setVideo(phrase_accroche: string, postId: number): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la recherche vid√©o',
        details: 'Simulation d\'une erreur lors de la recherche vid√©o YouTube',
        hint: 'V√©rifiez votre cl√© API YouTube et les quotas disponibles',
        code: 'TEST_ERROR_005',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setVideo', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyVideoUrl = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"; // Rick Roll classique pour le test
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setVideo', { videoUrl: dummyVideoUrl, postId });
      return from(Promise.resolve(dummyVideoUrl));
    }
    
    const prompt = this.getPromptsService.generateKeyWordForSearchVideo(phrase_accroche);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setVideo keyword')).pipe(
        switchMap(result => {
          if (!result) return of('');
          try {
            const keywordData: { keywords: string } = JSON.parse(extractJSONBlock(result));
            const keywords = keywordData.keywords;
            if (!keywords) return of('');
            return this.googleSearchService.searchFrenchVideo(keywords).pipe(
              switchMap((videoUrls: VideoInfo[]) => {
                if (!videoUrls.length) return of('');
                const videoPrompt = this.getPromptsService.searchVideoFromYoutubeResult(phrase_accroche, videoUrls);
                return from(this.openaiApiService.fetchData(videoPrompt, true, 'setVideo french video')).pipe(
                  switchMap(videoResult => {
                    const videoData: { video: string } = JSON.parse(extractJSONBlock(videoResult));
                    const videoUrl = videoData.video && videoData.video.length ? videoData.video : null;
                    return videoUrl ? of(videoUrl) : of('');
                  })
                );
              })
            );
          } catch (error) {
            this.loggingService.error('INFRASTRUCTURE', 'Erreur lors du parsing du keyword', error);
            return of('');
          }
        })
      ),
      'setVideo',
      `Recherche de vid√©o YouTube pour la phrase: ${phrase_accroche}`
    );
  }

  setFaq(article: string): Observable<{ question: string; response: string }[] | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de la g√©n√©ration FAQ',
        details: 'Simulation d\'une erreur lors de la g√©n√©ration de la FAQ avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_006',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setFaq', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const dummyFaq = [
        {
          question: "√Ä quelle fr√©quence dois-je arroser mes tomates cerises en pot ?",
          response: "Arrosez vos tomates cerises en pot tous les 2-3 jours en √©t√©, en v√©rifiant que la terre reste l√©g√®rement humide mais jamais d√©tremp√©e. La fr√©quence d√©pend de la temp√©rature, du vent et de la taille du pot."
        },
        {
          question: "Puis-je cultiver des tomates cerises sur un balcon orient√© nord ?",
          response: "Un balcon orient√© nord n'est pas id√©al car les tomates ont besoin de 6-8h de soleil par jour minimum. Privil√©giez les balcons sud, sud-est ou sud-ouest. √Ä d√©faut, choisissez des vari√©t√©s tr√®s pr√©coces et r√©sistantes."
        },
        {
          question: "Quand r√©colter les tomates cerises pour qu'elles soient les plus savoureuses ?",
          response: "R√©coltez les tomates cerises lorsqu'elles sont bien color√©es et l√©g√®rement souples au toucher. Pour un go√ªt optimal, cueillez-les le matin apr√®s la ros√©e, quand elles sont fra√Æches et gorg√©es de saveur."
        },
        {
          question: "Comment √©viter que mes tomates cerises se fendent ?",
          response: "Les tomates se fendent √† cause d'arrosages irr√©guliers. Maintenez une humidit√© constante avec un paillis, arrosez r√©guli√®rement sans exc√®s, et √©vitez les gros apports d'eau apr√®s une p√©riode s√®che."
        },
        {
          question: "Est-il n√©cessaire de tuteurer les tomates cerises en pot ?",
          response: "Oui, m√™me les vari√©t√©s naines ont besoin d'un tuteur car le poids des fruits peut faire plier les tiges. Utilisez un tuteur de 1,20-1,50m ou installez un treillis pour soutenir la croissance."
        }
      ];
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setFaq', { count: dummyFaq.length });
      return from(Promise.resolve(dummyFaq));
    }
    
    const prompt = this.getPromptsService.getPromptFaq(article);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setFaq')).pipe(
        map(result => {
          if (result === null) {
            throw new Error('Aucun r√©sultat retourn√© par l\'API OpenAI');
          }
          const data: {question: string; response: string}[]  = JSON.parse(extractJSONBlock(result))
          // TODO: Utiliser postId pour sauvegarder la FAQ dans Supabase
          return data;
        })
      ),
      'setFaq',
      `G√©n√©ration de FAQ pour un article de ${article.length} caract√®res`
    );
  }

  internalImage(article: string, postId: number): Observable<{ article: string; images: InternalImageData[] } | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: Impossible d\'ajouter les images internes',
        details: 'Simulation d\'une erreur pour tester la gestion d\'erreur',
        hint: 'V√©rifiez la connexion √† l\'API Pexels',
        code: 'TEST_ERROR_INTERNAL_IMAGE',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour internalImage', mockError);
      return from(Promise.resolve(mockError));
    }

    if (shouldReturnMock) {
      // Mock data avec images simul√©es
      const mockImages: InternalImageData[] = [
        {
          chapitre_id: 1,
          chapitre_key_word: 'garden',
          url_Image: 'https://images.pexels.com/photos/1000445/pexels-photo-1000445.jpeg',
          explanation_word: 'Image de jardin pour illustrer le premier chapitre'
        },
        {
          chapitre_id: 2,
          chapitre_key_word: 'plants',
          url_Image: 'https://images.pexels.com/photos/1000446/pexels-photo-1000446.jpeg',
          explanation_word: 'Image de plantes pour illustrer le deuxi√®me chapitre'
        }
      ];
      
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock images internes ajout√©es', { 
        originalLength: article.length,
        imagesCount: mockImages.length
      });
      
      return from(Promise.resolve({ 
        article: article, 
        images: mockImages 
      }));
    }

    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but internalImage() - Version compl√®te (sans sauvegarde Supabase)', { articleLength: article.length, postId });
    
    // Cr√©er un tableau des IDs de chapitres √† traiter
    const chapterIds = Array.from({ length: environment.globalNbChapter }, (_, i) => i + 1);
    const usedKeywords: string[] = [];
    
    return this.wrapWithErrorHandling(
      () => from(chapterIds).pipe(
      concatMap((chapitreId: number) => {
        this.loggingService.info('INFRASTRUCTURE', `üîß Traitement du chapitre ${chapitreId}/${environment.globalNbChapter}`);
        
        // 1Ô∏è‚É£ Extraire le contenu <h4> du paragraphe
        const paragraphRegex = new RegExp(`<span id=['"]paragraphe-${chapitreId}['"][^>]*>(.*?)</span>`, 's');
        const paragraphMatch = article.match(paragraphRegex);
        
        if (!paragraphMatch) {
          this.loggingService.warn('INFRASTRUCTURE', `Paragraphe ${chapitreId} non trouv√©`, {
            searchPattern: `<span id=['"]paragraphe-${chapitreId}['"]`,
            articleStart: article.substring(0, 200) + '...'
          });
          return of(null);
        }
        
        const paragraphContent = paragraphMatch[1];
        const h4Regex = /<h4[^>]*>(.*?)<\/h4>/;
        const h4Match = paragraphContent.match(h4Regex);
        
        if (!h4Match) {
          this.loggingService.warn('INFRASTRUCTURE', `Aucun titre <h4> trouv√© dans le paragraphe ${chapitreId}`);
          return of(null);
        }
        
        const h4Content = h4Match[1];
        this.loggingService.info('INFRASTRUCTURE', `üìù Titre extrait du chapitre ${chapitreId}: ${h4Content}`);
        
        // 2Ô∏è‚É£ Envoyer le contenu <h4> √† l'IA pour extraire un mot-cl√©
        const keywordPrompt = this.getPromptsService.getPromptGenericSelectKeyWordsFromChapitresInArticle(h4Content, usedKeywords);
        
        return from(this.openaiApiService.fetchData(keywordPrompt, true, 'internalImage ='+ usedKeywords)).pipe(
          switchMap(keywordResult => {
            if (!keywordResult) {
              this.loggingService.warn('INFRASTRUCTURE', `Aucun mot-cl√© g√©n√©r√© pour le chapitre ${chapitreId}`);
              return of(null);
            }
            
            try {
              const keywordData: { keyWord: string; explanation: string } = JSON.parse(extractJSONBlock(keywordResult));
              const keyword = keywordData.keyWord;
              const explanation = keywordData.explanation;
              
              if (!keyword || usedKeywords.includes(keyword)) {
                this.loggingService.warn('INFRASTRUCTURE', `Mot-cl√© invalide ou d√©j√† utilis√©: ${keyword}`);
                return of(null);
              }
              
              usedKeywords.push(keyword);
              this.loggingService.info('INFRASTRUCTURE', `üîë Mot-cl√© g√©n√©r√© pour chapitre ${chapitreId}: ${keyword} (${explanation})`);
              
              // 3Ô∏è‚É£ Utiliser le mot-cl√© avec l'API Pexels pour r√©cup√©rer 5 images
              return this.pexelsApiService.searchImages(keyword, 5).pipe(
                switchMap(images => {
                  if (!images.length) {
                    this.loggingService.warn('INFRASTRUCTURE', `Aucune image trouv√©e sur Pexels pour: ${keyword}`);
                    return of(null);
                  }
                  
                  this.loggingService.info('INFRASTRUCTURE', `üñºÔ∏è ${images.length} images trouv√©es sur Pexels pour: ${keyword}`);
                  
                  // 4Ô∏è‚É£ Envoyer les 5 images √† l'IA Vision pour s√©lectionner la meilleure
                  const imageUrls = images.map(img => img.src.medium);
                  const visionPrompt = this.getPromptsService.getPromptGenericSelectBestImageForChapitresInArticleWithVision(paragraphContent, imageUrls);
                  
                  return from(this.openaiApiService.fetchDataImage(visionPrompt, imageUrls, 'internalImage ='+ usedKeywords)).pipe(
                    switchMap(visionResult => {
                      if (!visionResult) {
                        this.loggingService.warn('INFRASTRUCTURE', `Aucune s√©lection d'image par l'IA Vision pour le chapitre ${chapitreId}`);
                        return of(null);
                      }
                      
                      try {
                        const imageSelection: { imageUrl: string } = JSON.parse(extractJSONBlock(visionResult));
                        const selectedImageUrl = imageSelection.imageUrl;
                        
                        if (!selectedImageUrl || !imageUrls.includes(selectedImageUrl)) {
                          this.loggingService.warn('INFRASTRUCTURE', `URL d'image s√©lectionn√©e invalide: ${selectedImageUrl}`);
                          return of(null);
                        }
                        
                        // Trouver l'image compl√®te correspondante
                        const selectedImage = images.find(img => img.src.medium === selectedImageUrl);
                        if (!selectedImage) {
                          this.loggingService.warn('INFRASTRUCTURE', `Image correspondante non trouv√©e pour l'URL: ${selectedImageUrl}`);
                          return of(null);
                        }
                        
                        this.loggingService.info('INFRASTRUCTURE', `‚úÖ Image s√©lectionn√©e pour chapitre ${chapitreId}: ${selectedImage.alt || keyword}`);
                        
                        // 5Ô∏è‚É£ Cr√©er les donn√©es d'image (sans insertion dans l'article)
                        const imageData: InternalImageData = {
                          chapitre_id: chapitreId,
                          chapitre_key_word: keyword,
                          url_Image: selectedImage.src.large,
                          explanation_word: explanation
                        };
                        
                        this.loggingService.info('INFRASTRUCTURE', `üì¶ Donn√©es d'image pr√©par√©es pour chapitre ${chapitreId}`, imageData);
                        return of(imageData);
                      } catch (error) {
                        this.loggingService.error('INFRASTRUCTURE', `Erreur parsing s√©lection image chapitre ${chapitreId}`, error);
                        return of(null);
                      }
                    })
                  );
                })
              );
            } catch (error) {
              this.loggingService.error('INFRASTRUCTURE', `Erreur parsing mot-cl√© chapitre ${chapitreId}`, error);
              return of(null);
            }
          })
        );
      }),
      // Collecter tous les r√©sultats
      toArray(),
      map(results => {
        const validResults = results.filter(result => result !== null) as InternalImageData[];
        this.loggingService.info('INFRASTRUCTURE', `üì® InternalImage termin√©: ${validResults.length}/${environment.globalNbChapter} chapitres trait√©s avec succ√®s`);
        
        // Retourner l'article original (non modifi√©) et les donn√©es des images
        return {
          article: article,
          images: validResults
        };
      })
    ),
    'internalImage',
    `Ajout d'images internes pour ${environment.globalNbChapter} chapitres dans l'article du post ${postId}`
    );
  }

  setInternalLink(article: string, postTitreAndId: { titre: string; id: number; new_href: string }[]): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = true;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de l\'ajout des liens internes',
        details: 'Simulation d\'une erreur lors de l\'ajout de liens internes avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_007',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour setInternalLink', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      const upgradedArticle = article.replace(
        /jardinage/gi, 
        '<a class="myTooltip" href="https://www.jardin-iris.be/jardinier-paysagiste-belgique-blog/guide-jardinage-debutant.html" title="Guide complet du jardinage">jardinage<span class="myTooltiptext">Guide complet du jardinage</span></a>'
      ).replace(
        /compost/gi,
        '<a class="myTooltip" href="https://www.jardin-iris.be/jardinier-paysagiste-belgique-blog/compostage-domestique-dechets-organiques.html" title="Tout savoir sur le compostage">compost<span class="myTooltiptext">Tout savoir sur le compostage</span></a>'
      );
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour setInternalLink', { originalLength: article.length, upgradedLength: upgradedArticle.length });
      return from(Promise.resolve(upgradedArticle));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but setInternalLink()', { articleLength: article.length, postsCount: postTitreAndId.length });
    
    const prompt = this.getPromptsService.addInternalLinkInArticle(article, postTitreAndId);
    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, true, 'setInternalLink')).pipe(
        map(result => {
          if (result === null) {
            throw new Error('Aucun r√©sultat retourn√© par l\'API OpenAI pour les liens internes');
          }
          const raw = extractJSONBlock(result);
          try {
          
            const data: { upgraded: string; idToRemove?: string } = JSON.parse(raw);
            this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse setInternalLink', { hasUpgraded: !!data.upgraded, idToRemove: data.idToRemove });
            return data.upgraded;
          } catch (error) {
            this.loggingService.error('INFRASTRUCTURE', 'Erreur lors du parsing du r√©sultat setInternalLink', error);
            console.error('JSON.parse failed:', error);
            console.error('--- snippet (start) ---\n', raw.slice(0, 1000));
            throw new Error('Erreur lors du parsing du r√©sultat des liens internes');
          }
        })
      ),
      'setInternalLink',
      `Ajout de liens internes dans un article de ${article.length} caract√®res avec ${postTitreAndId.length} posts disponibles`
    );
  }

  vegetal(article: string): Observable<string | PostgrestError> {
    const shouldReturnError = false;
    const shouldReturnMock = false;
    
    if (shouldReturnError) {
      const mockError: PostgrestError = {
        message: 'Erreur de test: √âchec de l\'ajout des noms botaniques',
        details: 'Simulation d\'une erreur lors de l\'enrichissement botanique avec OpenAI',
        hint: 'V√©rifiez votre cl√© API OpenAI et les cr√©dits disponibles',
        code: 'TEST_ERROR_008',
        name: 'PostgrestError'
      };
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Erreur simul√©e pour vegetal', mockError);
      return from(Promise.resolve(mockError));
    }
    
    if (shouldReturnMock) {
      let counter = 1;
      const upgradedArticle = article
        .replace(/tomates cerises/gi, `<span class="inat-vegetal" data-taxon-name="Solanum lycopersicum" data-paragraphe-id="mock-${counter++}">tomates cerises<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/560287697/large.jpg" alt="Solanum lycopersicum"/></div></span>`)
        .replace(/basilic/gi, `<span class="inat-vegetal" data-taxon-name="Ocimum basilicum" data-paragraphe-id="mock-${counter++}">basilic<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/559299228/large.jpg" alt="Ocimum basilicum"/></div></span>`)
        .replace(/persil/gi, `<span class="inat-vegetal" data-taxon-name="Petroselinum crispum" data-paragraphe-id="mock-${counter++}">persil<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/559297839/large.jpg" alt="Petroselinum crispum"/></div></span>`)
        .replace(/thym/gi, `<span class="inat-vegetal" data-taxon-name="Thymus vulgaris" data-paragraphe-id="mock-${counter++}">thym<div class="inat-vegetal-tooltip"><img src="https://static.inaturalist.org/photos/560305263/large.jpg" alt="Thymus vulgaris"/></div></span>`)
        .replace(/romarin/gi, `<span class="inat-vegetal" data-taxon-name="Rosmarinus officinalis" data-paragraphe-id="mock-${counter++}">romarin<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/560303647/large.jpg" alt="Rosmarinus officinalis"/></div></span>`)
        .replace(/lavande/gi, `<span class="inat-vegetal" data-taxon-name="Lavandula angustifolia" data-paragraphe-id="mock-${counter++}">lavande<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/559299228/large.jpg" alt="Lavandula angustifolia"/></div></span>`)
        .replace(/roses/gi, `<span class="inat-vegetal" data-taxon-name="Rosa" data-paragraphe-id="mock-${counter++}">roses<div class="inat-vegetal-tooltip"><img src="https://static.inaturalist.org/photos/560305263/large.jpg" alt="Rosa"/></div></span>`)
        .replace(/g√©raniums/gi, `<span class="inat-vegetal" data-taxon-name="Pelargonium" data-paragraphe-id="mock-${counter++}">g√©raniums<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/560287697/large.jpg" alt="Pelargonium"/></div></span>`)
        .replace(/p√©tunias/gi, `<span class="inat-vegetal" data-taxon-name="Petunia" data-paragraphe-id="mock-${counter++}">p√©tunias<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/559297839/large.jpg" alt="Petunia"/></div></span>`)
        .replace(/sauge/gi, `<span class="inat-vegetal" data-taxon-name="Salvia officinalis" data-paragraphe-id="mock-${counter++}">sauge<div class="inat-vegetal-tooltip"><img src="https://inaturalist-open-data.s3.amazonaws.com/photos/560303647/large.jpg" alt="Salvia officinalis"/></div></span>`);
      
      const inatSpansCount = (upgradedArticle.match(/<span class="inat-vegetal"/g) || []).length;
      this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse: Mock data pour vegetal', { 
        originalLength: article.length, 
        upgradedLength: upgradedArticle.length,
        inatSpansAdded: inatSpansCount
      });
      return from(Promise.resolve(upgradedArticle));
    }
    
    this.loggingService.info('INFRASTRUCTURE', 'üîß D√©but vegetal()', { articleLength: article.length });
    
    // 1Ô∏è‚É£ D'abord, utiliser l'IA pour injecter les noms scientifiques dans l'article complet
    const prompt = this.getPromptsService.getPromptAddVegetalInArticle(article, 0); // 0 = traitement global

    return this.wrapWithErrorHandling(
      () => from(this.openaiApiService.fetchData(prompt, false, 'vegetal global')).pipe(
        switchMap(result => {
            if (result === null) {
            this.loggingService.warn('INFRASTRUCTURE', 'Aucun r√©sultat de l\'IA pour l\'enrichissement botanique');
            // 2Ô∏è‚É£ En cas d'√©chec de l'IA, utiliser le service iNaturalist comme fallback
            return this.addScientificNameService.processAddUrlFromScientificNameInHtml(article);
            }
            
            try {
              const data: { upgraded: string } = JSON.parse(extractJSONBlock(result));
              if (data.upgraded) {
              this.loggingService.info('INFRASTRUCTURE', 'Article enrichi par l\'IA avec noms scientifiques', {
                originalLength: article.length,
                upgradedLength: data.upgraded.length
              });
              
              // 3Ô∏è‚É£ Ensuite, traiter l'article enrichi avec le service iNaturalist pour les URLs
              return this.addScientificNameService.processAddUrlFromScientificNameInHtml(data.upgraded);
            }
            
            // Si pas de contenu upgraded, utiliser l'article original
            return this.addScientificNameService.processAddUrlFromScientificNameInHtml(article);
            
          } catch (error) {
            this.loggingService.error('INFRASTRUCTURE', 'Erreur parsing r√©ponse IA vegetal', error);
            // En cas d'erreur de parsing, utiliser le service iNaturalist comme fallback
            return this.addScientificNameService.processAddUrlFromScientificNameInHtml(article);
          }
        }),
        map((finalArticle: string) => {
        this.loggingService.info('INFRASTRUCTURE', 'üì® R√©ponse vegetal compl√®te', { 
          originalLength: article.length, 
          finalLength: finalArticle.length 
        });
          return finalArticle;
      })
    ),
    'vegetal',
      `Enrichissement botanique complet de l'article (${article.length} caract√®res)`
    );
  }

  
}
